pcaExplore
kf
biocLite("pcaExplorer")
library("pcaExplorer")
pcaExplorer()
install.packages("omicade4")
http://bioconductor.org/packages/release/bioc/html/omicade4.html
source("https://bioconductor.org/biocLite.R")
biocLite("omicade4")
library("omicade4")
install.packages(c("ade4", "bdsmatrix", "bridgesampling", "brms", "cowplot", "git2r", "lme4", "magick", "memisc", "partykit", "rlang", "rprojroot", "rstan", "rstantools", "StanHeaders", "tis", "visNetwork", "withr", "xts"))
plot(cars)
plot(cars)
plot(cars)
getwd()
```{r}
plot(cars)
getwd()
getwd()
getwd()
a <- 234
a
library("markdown", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
renderMarkdown("QBiC/Lauk/I17R011Da08/Report/Lauk_Report.Rmd")
renderMarkdown("QBiC/Lauk/I17R011Da08/Report/Lauk_Report.Rmd")
renderMarkdown("QBiC/Lauk/I17R011Da08/Report/Lauk_Report.Rmd")
renderMarkdown("QBiC/Lauk/I17R011Da08/Report/Lauk_Report.Rmd")
renderMarkdown("QBiC/Lauk/I17R011Da08/Report/Lauk_Report.Rmd")
library("rmarkdown", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
renderMarkdown("QBiC/Lauk/I17R011Da08/Report/Lauk_Report.Rmd")
render("QBiC/Lauk/I17R011Da08/Report/Lauk_Report.Rmd")
library("BiocStyle", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
render("QBiC/Lauk/I17R011Da08/Report/Lauk_Report.Rmd")
library(pheatmap)
library(RColorBrewer)
library(viridis)
mat_col <- data.frame(group = col_groups)
set.seed(42)
random_string <- function(n) {
substr(paste(sample(letters), collapse = ""), 1, n)
}
mat <- matrix(rgamma(1000, shape = 1) * 5, ncol = 50)
colnames(mat) <- paste(
rep(1:3, each = ncol(mat) / 3),
replicate(ncol(mat), random_string(5)),
sep = ""
)
rownames(mat) <- replicate(nrow(mat), random_string(3))
mat[1:5,1:5]
col_groups <- substr(colnames(mat), 1, 1)
table(col_groups)
mat[,col_groups == "1"] <- mat[,col_groups == "1"] * 5
col_groups <- substr(colnames(mat), 1, 1)
table(col_groups)
mat[,col_groups == "1"] <- mat[,col_groups == "1"] * 5
table(col_groups)
mat
data.frame(group = col_groups)
## Cost plot
require(xlsx)
require(reshape2)
require(RColorBrewer)
require(ggplot2)
require(plyr)
source("themePublication.R")
r  <-read.xlsx(file = "~/QBiC/Prices/2018_Q1_costs_bioinformatics.xlsx",sheetIndex = 1)
head(r)
colnames(r)
r1<-r[,c(1:8)]
head(r1)
r1$Quantity.reduction..percentage.of.final.costs.[2]<- 1
r1$MS_MA.price_per_sample<- 84
r1$RNA_Seq.price_per_sample<- 144
r1$DNA_Exome_Seq.price_per_sample<- 160
r1$DNA_Genome_Seq.price_per_sample<- 240
r1$Metagenomics.16S..middle.between.Exome.and.RNA.Seq.<- 80
r1$Shotgun.Metagenomics<- 200
head(r1)
r2<-r1[-1,]
r2$MS_MA.price_per_sample<-r2$Quantity.reduction..percentage.of.final.costs. * r2$MS_MA.price_per_sample
r2$RNA_Seq.price_per_sample<- r2$Quantity.reduction..percentage.of.final.costs. *r2$RNA_Seq.price_per_sample
r2$DNA_Exome_Seq.price_per_sample<- r2$Quantity.reduction..percentage.of.final.costs. * r2$DNA_Exome_Seq.price_per_sample
r2$DNA_Genome_Seq.price_per_sample<- r2$Quantity.reduction..percentage.of.final.costs. * r2$DNA_Genome_Seq.price_per_sample
r2$Metagenomics.16S..middle.between.Exome.and.RNA.Seq.<- r2$Quantity.reduction..percentage.of.final.costs. * r2$Metagenomics.16S..middle.between.Exome.and.RNA.Seq.
r2$Shotgun.Metagenomics<- r2$Quantity.reduction..percentage.of.final.costs. * r2$Shotgun.Metagenomics
head(r2)
colnames(r2)[c(3:8)]<- c("LC-MS(PX/MX) data", "NGS (RNA-Seq) data" ,"NGS (WES) data", "NGS (WGS) data", "NGS (Metagenomics 16S rRNA) data", "Shotgun Metagenomics")
r2<-r2[!is.na(r2$number_of_samples),]
r2 <- r2[1:100,]
r3<-melt(r2[-2],id.vars = "number_of_samples")
r3$number_of_samples<-as.numeric(as.vector(r3$number_of_samples))
summary(r3)
rev(colorRampPalette(brewer.pal(6,name = "Blues"))(7)[-1])
#factor()
r3$variable<-factor(r3$variable,levels = rev(unique(as.vector(r3$variable))[c(5,1,2,3,6,4)]))
r4<-r3[r3$number_of_samples <=100,]
require("scales")
cost<-ggplot(r4,aes(x=number_of_samples,y=value,color=variable)) + geom_line(aes(group=variable))+
geom_area(aes(fill=variable),position = "identity")+
scale_x_continuous(breaks=c(1,seq(10,100,10))) +   scale_fill_manual(values = rev(colorRampPalette(brewer.pal(9,name = "Blues"))(8)[-c(1,2)])) +
scale_color_manual(values = rev(colorRampPalette(brewer.pal(9,name = "Blues"))(8)[-c(1,2)])) + theme_Publication()+
theme(panel.border =element_rect(color=NA,size = 0),legend.title =element_blank(),legend.margin = margin(2,2,2,2, "mm"),
legend.direction = "vertical",legend.position = c(0.75,0.8),legend.background = element_rect(colour = "black")) +
scale_y_continuous(labels=dollar_format(prefix="€ "))+
ylab(label = "Cost per Sample") +
xlab(label = "Number of Samples")
cost
ggsave(filename = "~/QBiC/Prices/2018_Q1_costs_bioinformatics.pdf",plot = cost,encoding = "ISOLatin9.enc",width = 10,height = 10)
ggsave(filename = "~/QBiC/Prices/2018_Q1_costs_bioinformatics.png",plot = cost,width = 10,height = 10)
## for table##
head(r2)
tbl<-r2[r2$number_of_samples %in% c(3,12,30,50),]
tbl_melt<-melt(tbl[,-2],id.vars = "number_of_samples")
tbl_melt$number_of_samples<-as.numeric(as.vector(tbl_melt$number_of_samples))
tbl_melt$nvalve<-tbl_melt$number_of_samples *tbl_melt$value
f<-as.data.frame(daply(tbl_melt,.(number_of_samples,variable),function(x) paste(c (round(x$nvalve,0),"€"),collapse = " ")))
f$num<- c(3,12,30,50)
f<-f[,c(7,1:6)]
colnames(f)[1] <-"# of Samples per study"
require(gridExtra)
require(grid)
tt3 <- ttheme_minimal(
core=list(bg_params = list(fill = c("white",blues9[1:4]), col=NA),
fg_params=list(fontface=3)),
colhead=list(fg_params=list(col="black", fontface=2L),
pg_params=list(fill="blue")),
rowhead=list(fg_params=list(col="white", fontface=2L)))
tt3$colhead$bg_params$fill<- "#08519C"
tt3$colhead$fg_params$col<-"white"
tt3$colhead$fg_params$fontsize<- 8
tt3$core$fg_params$fontsize<- 8
tt3$core$fg_params$parse<- TRUE
tt3$core$bg_params$col<-"black"
tt3$rowhead$bg_params$col<-"white"
tt3$rowhead$bg_params$fill<-"#08519C"
#tt3$rowhead$fg_params$label<- "#"
tt3$core$bg_params$fill<- c(rep("#08519C",4),rep(blues9[1:4],6))
tt3$core$fg_params$col<- c(rep("white",4),rep("black",24))
pdf("~/QBiC/Prices/2018_Q1_costs_bioinformatics_priceTable.pdf",encoding = "ISOLatin9.enc",width = 10,height = 2,pointsize = 12)
#grid.newpage()
grid.table(f,row=NULL,theme =tt3)
dev.off()
png("~/QBiC/Prices/2018_Q1_costs_bioinformatics_priceTable.png",width = 1400,height = 200,pointsize = 12)
grid.table(f,row=NULL,theme =tt3)
dev.off()
ttheme_default()
png("~/QBiC/Prices/2018_Q1_costs_bioinformatics_priceTable.png",width = 600,height = 100,pointsize = 12)
grid.table(f,row=NULL,theme =tt3)
dev.off()
png("~/QBiC/Prices/2018_Q1_costs_bioinformatics_priceTable.png",width = 700,height = 100,pointsize = 12)
grid.table(f,row=NULL,theme =tt3)
dev.off()
png("~/QBiC/Prices/2018_Q1_costs_bioinformatics_priceTable.png",width = 700,height = 100,pointsize = 10)
grid.table(f,row=NULL,theme =tt3)
dev.off()
png("~/QBiC/Prices/2018_Q1_costs_bioinformatics_priceTable.png",width = 700,height = 100)
grid.table(f,row=NULL,theme =tt3)
dev.off()
png("~/QBiC/Prices/2018_Q1_costs_bioinformatics_priceTable.png",width = 1400,height = 100)
grid.table(f,row=NULL,theme =tt3)
dev.off()
?png
png("~/QBiC/Prices/2018_Q1_costs_bioinformatics_priceTable.png",width = 1400,height = 200, units = "px", pointsize = 12, res = 1200)
grid.table(f,row=NULL,theme =tt3)
dev.off()
png("~/QBiC/Prices/2018_Q1_costs_bioinformatics_priceTable.png",width = 2800,height = 400, units = "px", pointsize = 12, res = 1200)
grid.table(f,row=NULL,theme =tt3)
dev.off()
png("~/QBiC/Prices/2018_Q1_costs_bioinformatics_priceTable.png",width = 2800,height = 400, units = "px", pointsize = 12, res = 120)
grid.table(f,row=NULL,theme =tt3)
dev.off()
png("~/QBiC/Prices/2018_Q1_costs_bioinformatics_priceTable.png",width = 2800,height = 400, units = "px", pointsize = 12, res = 300)
grid.table(f,row=NULL,theme =tt3)
dev.off()
source("https://bioconductor.org/biocLite.R")
biocLite("biomaRt")
library(sqldf)
library(reshape)
library(nlme)
library(doBy)
library(lattice)
library(qvalue)
library(limma)
library(ggplot2)
library(multcomp)
library(sm)
library(lsmeans)
library(phia)
library(dendextend)
data(NCI60_4arrays)
mcoin <- mcia(NCI60_4arrays)
plot(mcoin, sample.lab=FALSE, df.col=4:7)
colcode <- sapply(strsplit(colnames(NCI60_4arrays$agilent), split="\\."),
function(x) x[1])
plot(mcoin, sample.lab=FALSE, sample.color=as.factor(colcode))
data(NCI60_4arrays)
library(mcia)
library(omicade4)
data(NCI60_4arrays)
mcoin <- mcia(NCI60_4arrays)
plot(mcoin, sample.lab=FALSE, df.col=4:7)
plot(mcoin, sample.lab=FALSE, df.col=1:7)
plot(mcoin, sample.lab=FALSE, df.col=4:7)
colcode <- sapply(strsplit(colnames(NCI60_4arrays$agilent), split="\\."),
+                   function(x) x[1])
colcode <- sapply(strsplit(colnames(NCI60_4arrays$agilent), split="\\."),
function(x) x[1])
plot(mcoin, sample.lab=FALSE, sample.color=as.factor(colcode))
strsplit(colnames(NCI60_4arrays$agilent), split="\\.")
as.factor(colcode)
?plotVar
data("NCI60_4arrays")
mcoin <- mcia(NCI60_4arrays)
plotVar(mcoin, var=c("S100B", "S100A1"), var.lab = T)
nci60_mod <- NCI60_4arrays
rownames(nci60_mod)
rownames(nci60_mod$agilent)
rownames(nci60_mod$hgu133)
rownames(nci60_mod$hgu95) <- paste(rownames(nci60_mod$hgu95), "s1", sep = "_")
mcoin_mod <- mcia(nci60_mod)
mcoin_mod
mcoin_mod$mcoa$Tco
mcoin_mod$mcoa$TC
id <- split(rownames(mcoin_mod$mcoa$Tco), mcoin_mod$mcoa$TC$T)
sapply(id, function(x), head(x))
sapply(id, function(x) head(x))
plotVar(mcoin_mod, var=c("S100B", "S1001A1"), var.lab = T, sepID.data = 1:4, sepID.sep = "_")
plotVar(mcoin_mod, var=c("S100B", "S1001A1"), var.lab = T, sepID.data = 4, sepID.sep = "_")
plotVar(mcoin_mod, var=c("S100B", "S1001A1"), var.lab = T, sepID.data = 1:§, sepID.sep = "\\.")
plotVar(mcoin_mod, var=c("S100B", "S1001A1"), var.lab = T, sepID.data = 1:3, sepID.sep = "\\.")
pitch
=
c(233,204,242,130,112,142)
pitch = c(233,204,242,130,112,142)
sex <- c(rep("female", 3), rep("male", 3))
my.df <- data.frame(sex, pitch)
View(my.df)
xmdl <- lm(pitch~sex, my.df)
summary(xmdl)
(my.df[my.df$sex=="female",]$pitch)
mean(my.df[my.df$sex=="female",]$pitch)
plot(fitted(xmdl),residuals(xmdl))
library(lme4)
politeness <- read.csv("http://www.bodowinter.com/tutorial/politeness_data.csv")
which(is.na
(politeness)==T)
boxplot(frequency ~ attitude*gender,
col=c("white","lightgray"),politeness)
politeness.model  =  lmer(frequency  ~  attitude  +
(1|subject) + (1|scenario), data=politeness)
politeness.model
summary(politeness.model)
summary(politeness.model)
library(lme4);library(languageR)
install.packages("languageR")
library(lme4);library(languageR)
boxplot(frequency ~ attitude, data=politeness)
median(politeness[which(politeness$attitude=="pol"
),]$frequency, na.rm=T)
median(politeness[which(politeness$attitude=="inf"
),]$frequency)
boxplot(frequency ~ attitude*gender,
data=politeness)
?plotVar
library(omicade4)
?plotVar
data(NCI60_4arrays)
mcoin <- mcia(NCI60_4arrays)
plotVar(mcoin, var=c("S100B", "S100A1"), var.lab=TRUE)
selectVar(mcoin, a1.lim = c(1, Inf))
selectVar(mcoin, a1.lim = c(1, Inf)) -> selected_Var
mcoin <- mcia(NCI60_4arrays)
plotVar(mcoin, var=selected_Var, var.lab=TRUE)
mcoin <- mcia(NCI60_4arrays)
plotVar(mcoin, var=selected_Var$var, var.lab=TRUE)
library(shiny)
runExample("01_hello")
devtools::install_github("bioFAM/MOFA", subdir="MOFAtools")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("MSstats")
source("https://bioconductor.org/biocLite.R")
biocLite("MSstats")
biocLite("‘mzID’")
install.packages("mzID")
install.packages(Rcpp)
install.packages("Rcpp")
install.packages("checkmate")
install.packages("backports")
install.packages("checkmate")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2", version = "3.8")
install.packages("htmlwidgets")
install.packages("htmltools")
install.packages("htmlwidgets")
install.packages("shiny")
install.packages("mime")
install.packages("shiny")
install.packages("htmlwidgets")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2", version = "3.8")
install.packages("base64enc")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2", version = "3.8")
install.packages("markdown")
cars
library(MSstats)
?dataProcess
sessionInfo()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("affyio", version = "3.8")
library("affyio")
bb <- getBM(attributes = c("ensembl_gene_id", "hgnc_symbol", "external_gene_name", "entrezgene", "wikigene_name"), # "genedb",
values     = c("CD104"),
mart       = mart)
library(biomaRt)
bb <- getBM(attributes = c("ensembl_gene_id", "hgnc_symbol", "external_gene_name", "entrezgene", "wikigene_name"), # "genedb",
values     = c("CD104"),
mart       = mart)
?getBM
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
bb <- getBM(attributes = c("ensembl_gene_id", "hgnc_symbol", "external_gene_name", "entrezgene", "wikigene_name"), # "genedb",
values     = c("CD104"),
mart       = ensemble)
bb <- getBM(attributes = c("ensembl_gene_id", "hgnc_symbol", "external_gene_name", "entrezgene", "wikigene_name"), # "genedb",
values     = c("CD104"),
mart       = mart)
listAttributes(mart) -> attrBM
grep("CD104", bb$hgnc_symbol)
grep("CD104", bb$external_gene_name)
grep("CD104", bb$entrezgene)
grep("CD104", bb$wikigene_name)
View(bb)
View(attrBM)
bb <- getBM(attributes = c("ensembl_gene_id", "hgnc_symbol", "external_gene_name", "entrezgene", "ensembl_peptide_id"), # "genedb",
values     = c("CD104"),
mart       = mart)
View(bb)
bb <- getBM(attributes = c("ensembl_gene_id", "external_gene_name", "external_transcript_name"), # "genedb",
values     = c("CD104"),
mart       = mart)
grep("CD104", bb$external_transcript_name)
View(bb)
View(bb)
library(MSstats)
view(SRMRawData)
SRMRawData
head(SRMRawData)
sessionInfo$()
sessionInfo()
sessionInfo() -> sI
sI$basePkgs
fn = "test_session_info"
sink(file = fn)
sessionInfo()
close()
?sink
getwd()
sink()
getwd
getwd()
sink()
sink(fn)
sessionInfo()$otherPkgs
sink()
essionInfo()$otherPkgs
sessionInfo()$otherPkgs
sessionInfo()$otherPkgs
sessionInfo$otherPkgs
sessionInfo()
View(sI)
sink(fn)
sessionInfo()
sink()
3.45
library("markdown", lib.loc="/usr/lib/R/library")
install.packages("markdown")
library("markdown", lib.loc="/usr/lib/R/library")
library(markdown)
sessionInfo()
?lm
library(MSstats)
?dataProcess
library(MSstats)
library(SummarizedExperiment)
data(airway, package="airway")
se <- airway
se
test <- load("/home/heumos/QBiC/Marius/simon/sandra/recount2_re/recount2_re.Rdata")
rm(test)
test <- load("/home/heumos/QBiC/Marius/simon/sandra/recount2_re/recount2_2_re.Rdata")
res05[res05$padj < 0.05,]
load("~/QBiC/Marius/simon/sandra/recount2_co/recount2_2_co.Rdata")
res05 <- res05[res05$padj < 0.05,]
dim(na.omit(rese05))
dim(na.omit(res05))
res05
dim(na.omit(res05$padj))
is.na(res05)
is.na(res05$padj)
sum(is.na(res05$padj))
res05 <- res05[!is.na(res05$padj),]
dim(res05)
res05 <- res05[res05$padj < 0.05,]
dim(res05)
load("/home/heumos/QBiC/Marius/simon/sandra/recount2_re/recount2_2_re.Rdata")
library(MSstats)
?dataProcess
p53 <- read.csv("1000GP_p53_17_7571720-7590868.haps.og.haplos.tsv", header=T, as.is=T, check.names=F, sep="\t")
rownames(p53) <- p53$node.id
setwd("~/git/bh19_frontend/HaploBlockerExploration/")
library(HaploBlocker)
p53 <- read.csv("1000GP_p53_17_7571720-7590868.haps.og.haplos.tsv", header=T, as.is=T, check.names=F, sep="\t")
rownames(p53) <- p53$node.id
p53 <- p53[,-1]
p53_255 <- head(p53, 255)
p53_255_blocks <- block_calculation(p53_255, window_size = 3, node_min = 5)
plot_block(p53_255_blocks)
p53_255_blocks <- block_calculation(p53_255, window_size = 2, node_min = 5)
plot_block(p53_255_blocks)
p53_255_blocks <- block_calculation(p53_255, window_size = 2, node_min = 5)
plot_block(p53_255_blocks)
p53_255_blocks <- block_calculation(p53_255, window_size = 1, node_min = 5)
plot(blocks)
plot_block(p53_255_blocks)
unique(p53)
load("../../HaploBlocker/Data/KE_DH_chromo1.RData")
unique(data) -> u_data
dim(u_data)
dim(data)
?unique()
dim(unique(t(data)))
View(data)
library(tidyverse)
sum(duplicated(data))
sum(duplicated(t(data)))
sum(duplicated(t(p53))
)
sum(duplicated(p53))
View(data)
dim(data)
data_blocks <- block_calculation(data)
p53 <- read.csv("1000GP_p53_17_7571720-7590868.haps.og.haplos.tsv", header=T, as.is=T, check.names=F, sep="\t")
View(data)
p53 <- read.csv("1000GP_p53_17_7571720-7590868.haps.og.haplos.tsv", header=T, as.is=T, check.names=F, sep="\t")
rownames(p53) <- p53$node.id
p53 <- p53[,-1]
p53 <- read.csv("1000GP_p53_17_7571720-7590868.haps.og.haplos.tsv", header=T, as.is=T, check.names=F, sep="\t")
rownames(p53) <- p53$node.id
p53 <- p53[,-1]
p53_blocks <- block_calculation(p53)
plot_block(p53_blocks)
p53_blocks <- block_calculation(p53)
plot_block(p53_blocks)
plot_block(p53_blocks)
plot_block(p53_blocks)
plot_block(p53_blocks)
yeast <- read.csv("seqwish_yeast_l10k.og.haps.tsv", header=T, as.is=T, check.names=F, sep="\t")
rownames(yeast) <- yeast$node.id
yeast <- read.csv("seqwish_yeast_l10k.og.haps.tsv", header=T, as.is=T, check.names=F, sep=",")
yeast <- read.delim('seqwish_yeast_l10k.og.haps.tsv.gz')
View(yeast)
rownames(yeast) <- yeast$node.id
yeast <- yeast[,-1]
yeast_blocks <- block_calculation(yeast)
pdf("yeast_blocks")
plot_block(yeast_blocks)
dev.off()
View(data)
mhc[1,3 ] <- NA
library(HaploBlocker)
mhc <- read.csv("DRB1-3123.og.haplo.tsv", header = T, as.is = T, check.names = F, sep = "\t")
rownames(mhc) <- mhc$node.id
mhc <- mhc[,-1]
mhc[1,3] <- NA
mhc[56,3] <- NA
mhc[56,56] <- NA
mhc[56,4] <- NA
block_calculation(mhc)
mhc <- read.csv("DRB1-3123.og.haplo.tsv", header = T, as.is = T, check.names = F, sep = "\t")
rownames(mhc) <- mhc$node.id
mhc <- mhc[,-1]
mhc[1,3] <- NA
## mhc_blocks <- block_calculation(mhc, window_size = 10, node_min = 5) DOES NOT WORK!
# mhc_blocks <- block_calculation(mhc, window_size = 10, node_min = 1)
mhc_blocks <- block_calculation(mhc, window_size = 20, node_min = 3)
mhc[14,3] <- NA
## mhc_blocks <- block_calculation(mhc, window_size = 10, node_min = 5) DOES NOT WORK!
# mhc_blocks <- block_calculation(mhc, window_size = 10, node_min = 1)
mhc_blocks <- block_calculation(mhc, window_size = 20, node_min = 3)
mhc[4567,3] <- NA
## mhc_blocks <- block_calculation(mhc, window_size = 10, node_min = 5) DOES NOT WORK!
# mhc_blocks <- block_calculation(mhc, window_size = 10, node_min = 1)
mhc_blocks <- block_calculation(mhc, window_size = 20, node_min = 3)
mhc[2500,6] <- NA
## mhc_blocks <- block_calculation(mhc, window_size = 10, node_min = 5) DOES NOT WORK!
# mhc_blocks <- block_calculation(mhc, window_size = 10, node_min = 1)
mhc_blocks <- block_calculation(mhc, window_size = 20, node_min = 3)
block_plot(mhc_blocks)
plot_block(mhc_blocks)
plot_block(mhc_blocks)
plot_block(mhc_blocks)
mhc_blocks[[1]][[1]]
mhc_blocks[[1]][[2]]
mhc_blocks[[1]][[3]]
mhc_blocks[[1]][[4]]
mhc_blocks[[1]][[5]]
mhc_blocks[[1]][[6]]
